; This is an example configuration file that illustrates
; the structure of the configuration.
; It doesn't show all possible options. A more detailed example
; is available in doc/advanced.mux
;
; It contains two services, one DAB and one DAB+, and also shows
; both the file input useful for offline processing, and the
; ZeroMQ input useful in a 24/7 scenario.

; More information about the usage of the tools is available
; in the guide, which can be found on the
; www.opendigitalradio.org website.
;
; As you can see, comments are defined by semicolons.
;
; It consists of six mandatory sections, whose relative order in this
; file are of no importance.

; The general section defines global multiplex parameters.
general {
    ; the DAB Transmission mode (values 1-4 accepted)
    dabmode 1

    ; the number of ETI frames to generate (set to 0 to get an unlimited number)
    nbframes 0

    ; boolean fields can accept either false or true as values:

    ; Enable logging to syslog
    syslog false

    ; Enable timestamp definition necessary for SFN
    ; This also enables time encoding using the MNSC.
    tist false

    ; The management server is a simple TCP server that can present
    ; statistics data (buffers, overruns, underruns, etc)
    ; which can then be graphed a tool like Munin
    ; The doc/stats_dabmux_multi.py tool is a suitable
    ; plugin for that.
    ; If the port is zero, or the line commented, the server
    ; is not started.
    managementport 12720
}

remotecontrol {
    ; enable the telnet remote control server on the given port
    ; This server allows you to read and define parameters that
    ; some features export. It is only accessible from localhost.
    ; Set the port to 0 to disable the server
    telnetport 12721

    ; the remote control server makes use of the unique identifiers
    ; for the subchannels, services and components. Make sure you
    ; chose them so that you can identify them.
}

; Some ensemble parameters
ensemble {
    id 0xd350 ; you can also use decimal if you want
    ecc 0xe0 ; Extended Country Code

    local-time-offset auto  ; autmatically calculate from system local time
                            ; or
    ;local-time-offset 1    ; in hours, supports half-hour offsets

    ; all labels are maximum 16 characters in length
    label "HRadio Ensemble"
    ; The short label is built from the label by erasing letters, and cannot
    ; be longer than 8 characters. If omitted, it will be truncated from the
    ; label
    shortlabel "HRadio"
}

; Definition of DAB services
services {
    srv-hradio-dab1 {
        label "HRadio DAB1"
        shortlabel "HRadio1"
        id 0xd001
    }
}

subchannels {
    sub-hradio-dab1 {
        type dabplus
        inputfile "tcp://*:9001"
        bitrate 128
	    protection 3
        id 1
        zmq-buffer 40
        zmq-prebuffering 20
    }
}

; In our simple example, each component links one service to one subchannel
components {
    ; the component unique identifiers are used for the RC.
    comp-hradio-dab1 {
        service srv-hradio-dab1
        subchannel sub-hradio-dab1
        figtype 0x02
    }
}

; A list of outputs
outputs {
    ; The unique-id can be used by the remote control or the statistics server
    ; to identify the output

    ; Output RAW ETI NI to standard output
    ;stdout "fifo:///dev/stdout?type=raw"

    ; ZeroMQ output example
    ; Listen on all interfaces, on port 9100
    zmq  "zmq+tcp://*:9100"

    ; Throttle output to real-time (one ETI frame every 24ms)
    throttle "simul://"

    ; Important! For real-time operation, you need to have exactly one
    ; output that applies back-pressure to ODR-DabMux, otherwise it will run
    ; at the highest possible rate on your system!
    ;
    ; For an output to a pipe, the data consumer at the other end of the pipe
    ; will dictate the multiplexing rate to ODR-DabMux.
    ;
    ; If you use the zmq output, you must also enable a simul:// output!

    ; The edi output has a different syntax
    edi {
        ; EDI uses the UDP protocol. This implementation of EDI does not support
        ; EDI Packet Resend.
        destinations {
            ; The names you give to the destinations have no meaning,
            ; but have to be unique. You can give them meaningful names to help
            ; you identify the outputs.
            ;example_unicast {
                ; example for unicast EDI over UDP
                ; for unicast EDI, do not set source
              ;  destination "192.168.23.23"
             ;   sourceport  13000
            ;}

            unicast_for_edihttp {
                destination "edihttp"
                sourceport  12005
            }

            ; EDI over TCP is not supported
        }

        ; The settings below apply to all destinations
        ; The destination port cannot be set independently for
        ; different outputs because it is encoded in the transport
        ; header of the PFT layer.
        port    50000

        ; Enable the PFT subsystem. If false, AFPackets are sent.
        enable_pft  false

        ; How many lost fragments can be recovered by Reed-Solomon
        ; If set to 0, the PFT subsystem will only do Fragmentation and
        ; Transport, but no Reed Solomon.
        ; See ETSI TS 102 821, Clause 7 "PFT Layer", Figure 10. ODR-DabMux
        ; supports "Fragmentation and Transportation" and "Reed-Solomon and
        ; Transportation".
        fec         2

        ; Interleave fragments from several ETI frames so as to reduce the
        ; probability of errors when several UDP packets are lost in bursts.
        ; This comes at the cost of larger overall latency between multiplexing
        ; and modulation. This latency is given in milliseconds, and rounded
        ; to nearest multiple of 24ms. Set to 0 to disable the interleaver.
        interleave 0

        ; Length of a RS chunk, can be overriden
        ;default=207
        ;chunk_len   207

        ; Save the packets sent over ethernet to the file ./edi.debug
        dump        false

        ; show more debugging info
        verbose     false

        ; (optional) set the kind of alignment to use in TAG Packets
        ; 0: no padding
        ; 8: pad to eight bytes (default)
        ; above 8: insert *dmy TAG Item to pad to given size in bytes
        ;tagpacket_alignment 8
    }
}


